import { CUSTOM_PREFIX_NAMESPACE, PIPELINE_PREFIX_NAMESPACE } from "../../lib/bindersenvironment";
import { SlackMessage, SlackMessageBlock, sendToTechtalk } from "../../lib/slack";
import { createCoreV1Api, createKubeConfig } from "../../actions/k8s-client/util";
import { info, panic } from "@binders/client/lib/util/cli";
import { BindersConfig } from "@binders/binders-service-common/lib/bindersconfig/binders";
import { Command } from "commander";
import type { KubeConfig } from "@kubernetes/client-node";
import { getStagingCluster } from "../../actions/aks/cluster";
import { main } from "../../lib/program";
import { setupAksAccess } from "../../service/aks/access";

const NAMESPACE_AGE_LIMIT = 2 * 60 * 60 * 1000; // 2 hours in milliseconds
const SELF_DEPLOYED_NS_AGE_LIMIT = 7 * 24 * 60 * 60 * 1000 // 7 days in milliseconds

async function sendSlackNotification(staleCustomNamespaces: string[]) {
    const buildMessageBlock = (namespaces: string[]) => ({
        type: "section",
        text: {
            type: "mrkdwn",
            text: `* ${namespaces.join("\n* ")}\n`
        }
    } as SlackMessageBlock);
    const message: SlackMessage = {
        blocks: [
            {
                type: "header",
                text: {
                    type: "plain_text",
                    text: "Found some stale custom namespaces on staging"
                }
            },
            buildMessageBlock(staleCustomNamespaces)
        ]
    }
    await sendToTechtalk(message);
}

async function cleanupOldNamespaces(
    config: KubeConfig,
    ageLimit = NAMESPACE_AGE_LIMIT,
    selfDeployedNamespaceAgeLimit = SELF_DEPLOYED_NS_AGE_LIMIT 
) {
    const k8sApi = await createCoreV1Api(config);

    const excludedNamespaces = [
        "develop",
        "monitoring",
        "kube-system",
        "kube-public",
        "kube-node-lease",
        "default",
        "robusta",
        "kyverno",
        "ingress",
        "gatekeeper-system",
        "elastic-system",
        "cert-manager",
        "argocd"
    ];

    try {
        const namespaces = await k8sApi.listNamespace();
        const now = new Date().getTime();
        const staleCustomNamespaces = [];

        for (const ns of namespaces.items) {
            const namespaceName = ns.metadata?.name;
            const creationTime = ns.metadata?.creationTimestamp;

            if (!namespaceName || !creationTime) continue;

            const age = now - new Date(creationTime).getTime();

            if (namespaceName.startsWith(PIPELINE_PREFIX_NAMESPACE)) {
                if (age > ageLimit) {
                    info(`Deleting namespace: ${namespaceName}`);
                    await k8sApi.deleteNamespace({ name: namespaceName });
                }
            }
            else if (namespaceName.startsWith(CUSTOM_PREFIX_NAMESPACE)) {
                if (age > ageLimit) {
                    staleCustomNamespaces.push(namespaceName);
                }
            }
            else if (
                !excludedNamespaces.includes(namespaceName) &&
                !namespaceName.startsWith("rel")
            ) {
                if (age > selfDeployedNamespaceAgeLimit) {
                    staleCustomNamespaces.push(namespaceName);
                }
            }
        }

        if (staleCustomNamespaces.length > 0) {
            await sendSlackNotification(staleCustomNamespaces);
        }
    } catch (error) {
        panic(`Error during namespace cleanup: ${error}`);
    }
}

const SCRIPT_NAME = "Cleanup staging namespaces";

const program = new Command();

program
    .name(SCRIPT_NAME)
    .description("This script cleanup all namespaces generated by pipeline.")
    .option("-a, --age-limit [ageLimit]", "This is an age limit for a namepace, after it pass will be deleted by a script")

program.parse(process.argv);
const options: ScriptOptions = program.opts();

type ScriptOptions = {
    ageLimit?: string;
};

main(async () => {
    const parsedAge = parseInt(options.ageLimit)

    if (options.ageLimit && Number.isNaN(parsedAge)) {
        panic(`Can't parse argument ${options.ageLimit} as number`)
    }

    const clusterName = getStagingCluster()
    const config = BindersConfig.get();
    await setupAksAccess(config, clusterName)

    const kc = await createKubeConfig(clusterName, { useAdminContext: true });
    await cleanupOldNamespaces(kc)
})